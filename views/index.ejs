<!DOCTYPE html>
<html>

<head>
  <title>
    <%= title %>
  </title>
  <link rel='stylesheet' href='/stylesheets/style.css'>
  <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/locale/ja.js"></script>
  <script src="/javascripts/ipc.js"></script>
  <script>
    document.addEventListener("DOMContentLoaded", function(event) {
      let vueapp = new Vue({
        el: '#app',
        data: {
          status: false,
          selectedLive: '',
          broadcasts: {},
          liveChat: {},
          autoReload: true,
          nextPageToken: '',
          pollingIntervalMillis: 3000,
          intervalId: undefined
        },
        methods: {
          vGetLiveChat: function (liveChatId, nextPageToken = '') {
            const args = {liveChatId, nextPageToken};
            getLiveChat(args).then((chat) => {
              if (Object.keys(this.liveChat).length != 0 && parseInt(chat.data.items.length) > 0) {
                this.liveChat.items = this.liveChat.items.concat(chat.data.items);
                this.liveChat.nextPageToken = chat.data.nextPageToken;
                this.liveChat.pollingIntervalMillis = chat.data.pollingIntervalMillis;
              } else if (Object.keys(this.liveChat).length == 0) {
                this.liveChat = chat.data;
              }
              this.nextPageToken = chat.data.nextPageToken;
              if (this.pollingIntervalMillis != chat.data.pollingIntervalMillis) {
                this.pollingIntervalMillis = chat.data.pollingIntervalMillis;
              }
              this.vScrollDown();
            });
          },
          vReload: function () {
            location.reload();
          },
          vUpdateBroadcasts: async function () {
            const test = await getBroadcastData();
            this.broadcasts = test;
          },
          vSetInterval: function () {
            let vm = this;
            this.intervalId = setInterval(
              function () {
                vm.vGetLiveChat(vm.selectedLive.snippet.liveChatId, vm.nextPageToken);
              }, this.pollingIntervalMillis
            );
          },
          vRemoveInterval: function () {
            clearInterval(this.intervalId);
          },
          vChangeReload: function () {
            if (this.autoReload && this.selectedLive) {
              this.vSetInterval();
            } else {
              this.vRemoveInterval();
            }
          },
          vScrollDown () {
            const target = this.$el.querySelector('.chatItems');
            const height = target.scrollHeight - target.offsetHeight;
            target.scrollTop = target.scrollHeight;
          }
        },
        created: function () {
          const stat = getAuthStatus();
          this.status = stat;
          this.vUpdateBroadcasts();
          this.$nextTick();
        },
        filters: {
          moment: function (date) {
            return moment(date).format('YYYY/MM/DD HH:mm:ss');
          }
        },
        watch: {
          autoReload: function () {
            this.vChangeReload();
          },
          selectedLive: function () {
            this.vChangeReload();
          },
          'liveChat.items': function () {
            this.vScrollDown();
          },
          pollingIntervalMillis: function () {
            this.vSetInterval();
          }
        }
      });
    });
  </script>
</head>

<body>
  <h1>
    <%= title %>
  </h1>
  <div id="app">
    <template v-if="status">
      <select v-model="selectedLive" @change="vGetLiveChat(selectedLive.snippet.liveChatId);">
        <template v-for="live in broadcasts">
          <option v-if="live.snippet.liveChatId" :value="live">
            {{ live.snippet.title }}
          </option>
        </template>
      </select>
      <template v-if="selectedLive">
        <p>{{ selectedLive.snippet.liveChatId }}</p>
        <label for="autoReload">ライブチャットを自動更新</label>
        <input type="checkbox" id="autoReload" v-model="autoReload">
        <div class="chatItems">
          <div v-for="item in liveChat.items" class="chatItem">
            <div class="chatItem_image"><img :src="item.authorDetails.profileImageUrl"></div>
            <div class="chatItem_name">{{ item.authorDetails.displayName }}</div>
            <div class="chatItem_text">{{ item.snippet.displayMessage }}</div>
            <div class="chatItem_time">{{ item.snippet.publishedAt | moment }}</div>
          </div>
        </div>
        <button @click="vGetLiveChat(selectedLive.snippet.liveChatId, nextPageToken)">チャットの手動更新</button>
      </template>
    </template>
    <template v-else>
      <p>Googleアカウントでのログインが必要です。開いたブラウザからログインとアクセスの許可を行って下さい。</p>
      <p>アクセス許可が終わったら表示の更新ボタンで更新して下さい</p>
      <button @click="vReload">表示の更新</button>
    </template>
  </div>
</body>

</html>
